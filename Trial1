<!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1, user-scalable=no" />
  <meta name="theme-color" content="#0f172a" />
  <title>Reflex Tap</title>
  <style>
    /* ===== Theme (easy to tweak) ===== */
    :root{
      --bg:#0f172a;            /* slate-900 */
      --panel:#111827cc;       /* slate-900/80 */
      --text:#e5e7eb;          /* slate-200 */
      --muted:#94a3b8;         /* slate-400 */
      --accent:#10b981;        /* emerald-500 */
      --accent-2:#6366f1;      /* indigo-500 */
      --target-border:#ffffffcc;
      --shadow:0 10px 24px rgba(0,0,0,.35);
      --radius:22px;
    }

    html,body{height:100%;margin:0;background:var(--bg);color:var(--text);font-family:ui-sans-serif,system-ui,-apple-system,Segoe UI,Roboto,"Helvetica Neue",Arial,"Apple Color Emoji","Segoe UI Emoji"}
    .app{position:fixed;inset:0;touch-action:manipulation;overscroll-behavior:contain}

    /* HUD */
    .hud{position:absolute;left:0;right:0;top:0;padding:16px;display:flex;gap:12px;justify-content:space-between;align-items:center}
    .row{display:flex;gap:10px;align-items:center}
    .btn{background:#111827;padding:10px 14px;border-radius:16px;border:0;color:var(--text);box-shadow:var(--shadow);cursor:pointer}
    .btn:active{transform:scale(.98)}
    .pill{background:#111827;padding:8px 12px;border-radius:14px;box-shadow:var(--shadow)}
    .best{background:var(--accent-2);}
    select, .number{background:#111827;border-radius:14px;border:1px solid #1f2937;color:var(--text);padding:8px 12px}

    /* Targets */
    .target{position:absolute;border-radius:9999px;display:block;border:4px solid var(--target-border);background:color-mix(in oklab, var(--accent) 90%, #000 10%);box-shadow:0 6px 20px rgba(16,185,129,.45)}
    .target:active{transform:scale(.95)}

    /* Overlay */
    .overlay{position:absolute;inset:0;display:grid;place-items:center}
    .card{width:min(900px,92vw);background:var(--panel);backdrop-filter:blur(8px);border-radius:var(--radius);padding:24px;box-shadow:var(--shadow)}
    .grid{display:grid;gap:12px;grid-template-columns:repeat(auto-fit,minmax(220px,1fr))}

    .footer{position:absolute;left:0;right:0;bottom:0;padding:10px 12px;display:flex;justify-content:space-between;color:var(--muted);font-size:12px}
  </style>
</head>
<body>
  <div id="app" class="app"></div>

  <script>
    "use strict";
    /* ==============================================
       CONFIG — Edit these values to tune the game
       Everything below can be changed without touching core logic.
    =============================================== */
    const CONFIG = {
      sessionSeconds: 30,
      difficulties: {
        easy:   { size: 160, lifeMs: 1600, spawnMs: 650 },
        normal: { size: 120, lifeMs: 1200, spawnMs: 520 },
        hard:   { size:  96, lifeMs:  900, spawnMs: 420 },
      },
      defaultDifficulty: "normal",
      marginMultiplier: 0.8, // keep targets from screen edges (× size)
      comboBonus: 2,         // extra points per combo step beyond 1
      hitPoints: 10,
      missPenalty: 3,
      targetColor: getComputedStyle(document.documentElement).getPropertyValue("--accent") || "#10b981",
    };

    /* ===== Utilities ===== */
    const clamp = (v,a,b)=>Math.max(a,Math.min(b,v));
    const $ = (q,el=document)=>el.querySelector(q);
    const $$ = (q,el=document)=>[...el.querySelectorAll(q)];

    /* ===== State ===== */
    let running = false;
    let score = 0, hits = 0, misses = 0, combo = 0;
    let best = Number(localStorage.getItem("tap_best")||0);
    let difficulty = CONFIG.defaultDifficulty;
    let targets = [];
    let gid = 1;
    let sessionLeft = CONFIG.sessionSeconds; // seconds

    const app = document.getElementById("app");

    /* ===== UI ===== */
    app.innerHTML = `
      <div class="hud">
        <div class="row">
          <button id="start" class="btn">Start</button>
          <select id="diff">
            <option value="easy">Easy</option>
            <option value="normal">Normal</option>
            <option value="hard">Hard</option>
          </select>
          <label class="pill">Time <input id="seconds" class="number" type="number" min="10" max="120" step="5" value="${CONFIG.sessionSeconds}" style="width:70px;margin-left:8px"></label>
        </div>
        <div class="row">
          <div class="pill">Score: <b id="score">0</b></div>
          <div class="pill">Combo: <b id="combo">0×</b></div>
          <div class="pill">Acc: <b id="acc">100%</b></div>
          <div class="pill">Time: <b id="time">${CONFIG.sessionSeconds}s</b></div>
          <div class="pill best">Best: <b id="best">${best}</b></div>
        </div>
      </div>
      <div id="layer"></div>
      <div id="overlay" class="overlay">
        <div class="card">
          <h1 style="margin:0 0 8px 0">Reflex Tap</h1>
          <p style="margin:0 0 12px 0;color:var(--muted)">Tap the glowing circles as they appear. Misses reset your combo. You have a limited time — go for a high score!</p>
          <div class="grid" style="margin-bottom:12px">
            <div class="pill">Recommended: use fullscreen and landscape on a tablet.</div>
            <div class="pill">Tips: two thumbs near center; keep a steady tempo.</div>
            <div class="pill">Difficulty: Easy = bigger+slower; Hard = smaller+faster.</div>
          </div>
          <div class="row">
            <button id="overlayStart" class="btn" style="background:var(--accent);color:white">Start Game</button>
            <select id="overlayDiff">
              <option value="easy">Easy</option>
              <option value="normal" selected>Normal</option>
              <option value="hard">Hard</option>
            </select>
          </div>
        </div>
      </div>
      <div class="footer"><div>Tablet-optimized • Pointer Events • No framework</div><div>v1.0</div></div>
    `;

    const els = {
      start: $("#start"),
      diff: $("#diff"),
      seconds: $("#seconds"),
      score: $("#score"),
      combo: $("#combo"),
      acc: $("#acc"),
      time: $("#time"),
      best: $("#best"),
      layer: $("#layer"),
      overlay: $("#overlay"),
      overlayStart: $("#overlayStart"),
      overlayDiff: $("#overlayDiff"),
    };

    function resetState(){
      score=0;hits=0;misses=0;combo=0;targets.length=0;gid=1;
      sessionLeft = Number(els.seconds.value)||CONFIG.sessionSeconds;
      renderHUD();
      els.layer.innerHTML="";
    }

    function start(){
      resetState();
      running=true; els.overlay.style.display="none";
      loopStart();
    }

    function pause(){ running=false; }

    function end(){ running=false; updateBest(); els.overlay.style.display="grid"; }

    function updateBest(){ if(score>best){ best=score; localStorage.setItem("tap_best", String(best)); els.best.textContent=best; } }

    function renderHUD(){
      els.score.textContent = score;
      els.combo.textContent = combo+"×";
      const total = hits+misses; const acc = total? Math.round(hits/total*100) : 100;
      els.acc.textContent = acc+"%";
      els.time.textContent = Math.max(0, Math.ceil(sessionLeft))+"s";
    }

    function pickSpawn(width,height,margin){
      const x = margin + Math.random()*(width-margin*2);
      const y = margin + Math.random()*(height-margin*2);
      return {x,y};
    }

    function spawnTarget(){
      const cfg = CONFIG.difficulties[difficulty];
      const rect = app.getBoundingClientRect();
      const margin = cfg.size * CONFIG.marginMultiplier;
      const {x,y} = pickSpawn(rect.width, rect.height, margin);
      const id = gid++;

      const el = document.createElement("button");
      el.setAttribute("data-role","target");
      el.className = "target";
      Object.assign(el.style,{
        left: x+"px",
        top: y+"px",
        width: cfg.size+"px",
        height: cfg.size+"px",
        transform: "translate(-50%,-50%)",
      });
      el.style.position="absolute";
      el.style.opacity="1";

      const bornAt = performance.now();
      const lifeMs = cfg.lifeMs;

      el.onpointerdown = (e)=>{
        if(!running || !e.isPrimary) return;
        onHit(id, el);
      };

      els.layer.appendChild(el);

      // simple fade/scale lifetime
      const anim = ()=>{
        if(!running){ el.remove(); return; }
        const now = performance.now();
        const life = clamp((now-bornAt)/lifeMs,0,1);
        el.style.opacity = String(1 - life*0.4);
        el.style.transform = `translate(-50%,-50%) scale(${1+life*0.2})`;
        if(life < 1){ requestAnimationFrame(anim); }
        else { el.remove(); }
      };
      requestAnimationFrame(anim);

      targets.push({id, el, bornAt, lifeMs});
      // Auto purge expired nodes from list occasionally
      if(targets.length>60) targets = targets.filter(t=>document.body.contains(t.el));
    }

    function onHit(id, el){
      // Remove the target and update score/combo
      try{ el.remove(); }catch{}
      hits++; combo++; score += CONFIG.hitPoints + Math.floor(Math.max(0, combo-1)*CONFIG.comboBonus);
      renderHUD();
    }

    function onMiss(){
      misses++; combo=0; score = Math.max(0, score - CONFIG.missPenalty);
      renderHUD();
    }

    // background miss handler: if you tap outside a target while running
    app.addEventListener("pointerdown", (e)=>{
      if(!running || !e.isPrimary) return;
      const el = e.target;
      if(!(el instanceof Element)) return;
      if(!el.closest('[data-role="target"]')) onMiss();
    });

    // Controls
    els.start.addEventListener("click", ()=> running ? pause() : start());
    els.overlayStart.addEventListener("click", start);
    els.diff.addEventListener("change", (e)=>{ difficulty = e.target.value; });
    els.overlayDiff.addEventListener("change", (e)=>{ difficulty = e.target.value; els.diff.value = e.target.value; });

    /* ===== Game Loop ===== */
    let raf;
    function loopStart(){
      const cfg = CONFIG.difficulties[difficulty];
      let lastSpawn = performance.now();
      let lastTick = performance.now();

      const tick = ()=>{
        if(!running) return;
        const now = performance.now();

        // countdown ~60fps but reduce drift using delta
        const dt = (now - lastTick)/1000; // seconds
        lastTick = now;
        sessionLeft = Math.max(0, sessionLeft - dt);
        if(sessionLeft<=0){ end(); return; }

        // spawn
        if(now - lastSpawn >= cfg.spawnMs){
          lastSpawn = now;
          spawnTarget();
        }

        renderHUD();
        raf = requestAnimationFrame(tick);
      };
      raf = requestAnimationFrame(tick);
    }

    // Expose CONFIG for quick live edits from console
    window.REFLEX_CONFIG = CONFIG;
  </script>
</body>
</html>
